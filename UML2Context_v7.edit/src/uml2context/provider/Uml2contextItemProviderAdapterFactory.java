/**
 */
package uml2context.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import uml2context.util.Uml2contextAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class Uml2contextItemProviderAdapterFactory extends Uml2contextAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Uml2contextItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link uml2context.Element} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ElementItemProvider elementItemProvider;

	/**
	 * This creates an adapter for a {@link uml2context.Element}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createElementAdapter() {
		if (elementItemProvider == null) {
			elementItemProvider = new ElementItemProvider(this);
		}

		return elementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uml2context.Feature} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeatureItemProvider featureItemProvider;

	/**
	 * This creates an adapter for a {@link uml2context.Feature}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeatureAdapter() {
		if (featureItemProvider == null) {
			featureItemProvider = new FeatureItemProvider(this);
		}

		return featureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uml2context.Classifier} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClassifierItemProvider classifierItemProvider;

	/**
	 * This creates an adapter for a {@link uml2context.Classifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClassifierAdapter() {
		if (classifierItemProvider == null) {
			classifierItemProvider = new ClassifierItemProvider(this);
		}

		return classifierItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uml2context.StructuralFeature} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StructuralFeatureItemProvider structuralFeatureItemProvider;

	/**
	 * This creates an adapter for a {@link uml2context.StructuralFeature}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStructuralFeatureAdapter() {
		if (structuralFeatureItemProvider == null) {
			structuralFeatureItemProvider = new StructuralFeatureItemProvider(this);
		}

		return structuralFeatureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uml2context.BehavioralFeature} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BehavioralFeatureItemProvider behavioralFeatureItemProvider;

	/**
	 * This creates an adapter for a {@link uml2context.BehavioralFeature}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBehavioralFeatureAdapter() {
		if (behavioralFeatureItemProvider == null) {
			behavioralFeatureItemProvider = new BehavioralFeatureItemProvider(this);
		}

		return behavioralFeatureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uml2context.Class} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClassItemProvider classItemProvider;

	/**
	 * This creates an adapter for a {@link uml2context.Class}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClassAdapter() {
		if (classItemProvider == null) {
			classItemProvider = new ClassItemProvider(this);
		}

		return classItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uml2context.AgentClass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AgentClassItemProvider agentClassItemProvider;

	/**
	 * This creates an adapter for a {@link uml2context.AgentClass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAgentClassAdapter() {
		if (agentClassItemProvider == null) {
			agentClassItemProvider = new AgentClassItemProvider(this);
		}

		return agentClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uml2context.Property} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyItemProvider propertyItemProvider;

	/**
	 * This creates an adapter for a {@link uml2context.Property}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyAdapter() {
		if (propertyItemProvider == null) {
			propertyItemProvider = new PropertyItemProvider(this);
		}

		return propertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uml2context.Operation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperationItemProvider operationItemProvider;

	/**
	 * This creates an adapter for a {@link uml2context.Operation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperationAdapter() {
		if (operationItemProvider == null) {
			operationItemProvider = new OperationItemProvider(this);
		}

		return operationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uml2context.ActionClass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionClassItemProvider actionClassItemProvider;

	/**
	 * This creates an adapter for a {@link uml2context.ActionClass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionClassAdapter() {
		if (actionClassItemProvider == null) {
			actionClassItemProvider = new ActionClassItemProvider(this);
		}

		return actionClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uml2context.NamedElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NamedElementItemProvider namedElementItemProvider;

	/**
	 * This creates an adapter for a {@link uml2context.NamedElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNamedElementAdapter() {
		if (namedElementItemProvider == null) {
			namedElementItemProvider = new NamedElementItemProvider(this);
		}

		return namedElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uml2context.PackageableElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PackageableElementItemProvider packageableElementItemProvider;

	/**
	 * This creates an adapter for a {@link uml2context.PackageableElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPackageableElementAdapter() {
		if (packageableElementItemProvider == null) {
			packageableElementItemProvider = new PackageableElementItemProvider(this);
		}

		return packageableElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uml2context.Type} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeItemProvider typeItemProvider;

	/**
	 * This creates an adapter for a {@link uml2context.Type}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeAdapter() {
		if (typeItemProvider == null) {
			typeItemProvider = new TypeItemProvider(this);
		}

		return typeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uml2context.Namespace} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NamespaceItemProvider namespaceItemProvider;

	/**
	 * This creates an adapter for a {@link uml2context.Namespace}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNamespaceAdapter() {
		if (namespaceItemProvider == null) {
			namespaceItemProvider = new NamespaceItemProvider(this);
		}

		return namespaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uml2context.RedefinableElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RedefinableElementItemProvider redefinableElementItemProvider;

	/**
	 * This creates an adapter for a {@link uml2context.RedefinableElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRedefinableElementAdapter() {
		if (redefinableElementItemProvider == null) {
			redefinableElementItemProvider = new RedefinableElementItemProvider(this);
		}

		return redefinableElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uml2context.OrganizationClass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrganizationClassItemProvider organizationClassItemProvider;

	/**
	 * This creates an adapter for a {@link uml2context.OrganizationClass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrganizationClassAdapter() {
		if (organizationClassItemProvider == null) {
			organizationClassItemProvider = new OrganizationClassItemProvider(this);
		}

		return organizationClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uml2context.AgentRoleClass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AgentRoleClassItemProvider agentRoleClassItemProvider;

	/**
	 * This creates an adapter for a {@link uml2context.AgentRoleClass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAgentRoleClassAdapter() {
		if (agentRoleClassItemProvider == null) {
			agentRoleClassItemProvider = new AgentRoleClassItemProvider(this);
		}

		return agentRoleClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uml2context.ObjectRoleClass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObjectRoleClassItemProvider objectRoleClassItemProvider;

	/**
	 * This creates an adapter for a {@link uml2context.ObjectRoleClass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObjectRoleClassAdapter() {
		if (objectRoleClassItemProvider == null) {
			objectRoleClassItemProvider = new ObjectRoleClassItemProvider(this);
		}

		return objectRoleClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uml2context.EnvironmentClass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnvironmentClassItemProvider environmentClassItemProvider;

	/**
	 * This creates an adapter for a {@link uml2context.EnvironmentClass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnvironmentClassAdapter() {
		if (environmentClassItemProvider == null) {
			environmentClassItemProvider = new EnvironmentClassItemProvider(this);
		}

		return environmentClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uml2context.AgentMessageClass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AgentMessageClassItemProvider agentMessageClassItemProvider;

	/**
	 * This creates an adapter for a {@link uml2context.AgentMessageClass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAgentMessageClassAdapter() {
		if (agentMessageClassItemProvider == null) {
			agentMessageClassItemProvider = new AgentMessageClassItemProvider(this);
		}

		return agentMessageClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uml2context.MultiplicityElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MultiplicityElementItemProvider multiplicityElementItemProvider;

	/**
	 * This creates an adapter for a {@link uml2context.MultiplicityElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMultiplicityElementAdapter() {
		if (multiplicityElementItemProvider == null) {
			multiplicityElementItemProvider = new MultiplicityElementItemProvider(this);
		}

		return multiplicityElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uml2context.TypedElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypedElementItemProvider typedElementItemProvider;

	/**
	 * This creates an adapter for a {@link uml2context.TypedElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypedElementAdapter() {
		if (typedElementItemProvider == null) {
			typedElementItemProvider = new TypedElementItemProvider(this);
		}

		return typedElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uml2context.PlanClass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlanClassItemProvider planClassItemProvider;

	/**
	 * This creates an adapter for a {@link uml2context.PlanClass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlanClassAdapter() {
		if (planClassItemProvider == null) {
			planClassItemProvider = new PlanClassItemProvider(this);
		}

		return planClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uml2context.Duty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DutyItemProvider dutyItemProvider;

	/**
	 * This creates an adapter for a {@link uml2context.Duty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDutyAdapter() {
		if (dutyItemProvider == null) {
			dutyItemProvider = new DutyItemProvider(this);
		}

		return dutyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uml2context.Right} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RightItemProvider rightItemProvider;

	/**
	 * This creates an adapter for a {@link uml2context.Right}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRightAdapter() {
		if (rightItemProvider == null) {
			rightItemProvider = new RightItemProvider(this);
		}

		return rightItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uml2context.ProtocolClass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProtocolClassItemProvider protocolClassItemProvider;

	/**
	 * This creates an adapter for a {@link uml2context.ProtocolClass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProtocolClassAdapter() {
		if (protocolClassItemProvider == null) {
			protocolClassItemProvider = new ProtocolClassItemProvider(this);
		}

		return protocolClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uml2context.Relationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelationshipItemProvider relationshipItemProvider;

	/**
	 * This creates an adapter for a {@link uml2context.Relationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelationshipAdapter() {
		if (relationshipItemProvider == null) {
			relationshipItemProvider = new RelationshipItemProvider(this);
		}

		return relationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uml2context.DirectedRelationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DirectedRelationshipItemProvider directedRelationshipItemProvider;

	/**
	 * This creates an adapter for a {@link uml2context.DirectedRelationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDirectedRelationshipAdapter() {
		if (directedRelationshipItemProvider == null) {
			directedRelationshipItemProvider = new DirectedRelationshipItemProvider(this);
		}

		return directedRelationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uml2context.Association} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssociationItemProvider associationItemProvider;

	/**
	 * This creates an adapter for a {@link uml2context.Association}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssociationAdapter() {
		if (associationItemProvider == null) {
			associationItemProvider = new AssociationItemProvider(this);
		}

		return associationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uml2context.Dependency} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DependencyItemProvider dependencyItemProvider;

	/**
	 * This creates an adapter for a {@link uml2context.Dependency}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDependencyAdapter() {
		if (dependencyItemProvider == null) {
			dependencyItemProvider = new DependencyItemProvider(this);
		}

		return dependencyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uml2context.Ownership} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OwnershipItemProvider ownershipItemProvider;

	/**
	 * This creates an adapter for a {@link uml2context.Ownership}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOwnershipAdapter() {
		if (ownershipItemProvider == null) {
			ownershipItemProvider = new OwnershipItemProvider(this);
		}

		return ownershipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uml2context.Inhabit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InhabitItemProvider inhabitItemProvider;

	/**
	 * This creates an adapter for a {@link uml2context.Inhabit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInhabitAdapter() {
		if (inhabitItemProvider == null) {
			inhabitItemProvider = new InhabitItemProvider(this);
		}

		return inhabitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uml2context.Control} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlItemProvider controlItemProvider;

	/**
	 * This creates an adapter for a {@link uml2context.Control}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlAdapter() {
		if (controlItemProvider == null) {
			controlItemProvider = new ControlItemProvider(this);
		}

		return controlItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uml2context.Play} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlayItemProvider playItemProvider;

	/**
	 * This creates an adapter for a {@link uml2context.Play}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlayAdapter() {
		if (playItemProvider == null) {
			playItemProvider = new PlayItemProvider(this);
		}

		return playItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uml2context.Generalization} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GeneralizationItemProvider generalizationItemProvider;

	/**
	 * This creates an adapter for a {@link uml2context.Generalization}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGeneralizationAdapter() {
		if (generalizationItemProvider == null) {
			generalizationItemProvider = new GeneralizationItemProvider(this);
		}

		return generalizationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uml2context.Goal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GoalItemProvider goalItemProvider;

	/**
	 * This creates an adapter for a {@link uml2context.Goal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGoalAdapter() {
		if (goalItemProvider == null) {
			goalItemProvider = new GoalItemProvider(this);
		}

		return goalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uml2context.Belief} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BeliefItemProvider beliefItemProvider;

	/**
	 * This creates an adapter for a {@link uml2context.Belief}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBeliefAdapter() {
		if (beliefItemProvider == null) {
			beliefItemProvider = new BeliefItemProvider(this);
		}

		return beliefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uml2context.Constraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstraintItemProvider constraintItemProvider;

	/**
	 * This creates an adapter for a {@link uml2context.Constraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstraintAdapter() {
		if (constraintItemProvider == null) {
			constraintItemProvider = new ConstraintItemProvider(this);
		}

		return constraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uml2context.MasmlClassDiagram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MasmlClassDiagramItemProvider masmlClassDiagramItemProvider;

	/**
	 * This creates an adapter for a {@link uml2context.MasmlClassDiagram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMasmlClassDiagramAdapter() {
		if (masmlClassDiagramItemProvider == null) {
			masmlClassDiagramItemProvider = new MasmlClassDiagramItemProvider(this);
		}

		return masmlClassDiagramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uml2context.Parameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterItemProvider parameterItemProvider;

	/**
	 * This creates an adapter for a {@link uml2context.Parameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterAdapter() {
		if (parameterItemProvider == null) {
			parameterItemProvider = new ParameterItemProvider(this);
		}

		return parameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uml2context.Aggregation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AggregationItemProvider aggregationItemProvider;

	/**
	 * This creates an adapter for a {@link uml2context.Aggregation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAggregationAdapter() {
		if (aggregationItemProvider == null) {
			aggregationItemProvider = new AggregationItemProvider(this);
		}

		return aggregationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uml2context.Composite} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompositeItemProvider compositeItemProvider;

	/**
	 * This creates an adapter for a {@link uml2context.Composite}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompositeAdapter() {
		if (compositeItemProvider == null) {
			compositeItemProvider = new CompositeItemProvider(this);
		}

		return compositeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uml2context.Perception} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PerceptionItemProvider perceptionItemProvider;

	/**
	 * This creates an adapter for a {@link uml2context.Perception}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPerceptionAdapter() {
		if (perceptionItemProvider == null) {
			perceptionItemProvider = new PerceptionItemProvider(this);
		}

		return perceptionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uml2context.Planning} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlanningItemProvider planningItemProvider;

	/**
	 * This creates an adapter for a {@link uml2context.Planning}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlanningAdapter() {
		if (planningItemProvider == null) {
			planningItemProvider = new PlanningItemProvider(this);
		}

		return planningItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (elementItemProvider != null) elementItemProvider.dispose();
		if (featureItemProvider != null) featureItemProvider.dispose();
		if (classifierItemProvider != null) classifierItemProvider.dispose();
		if (structuralFeatureItemProvider != null) structuralFeatureItemProvider.dispose();
		if (behavioralFeatureItemProvider != null) behavioralFeatureItemProvider.dispose();
		if (classItemProvider != null) classItemProvider.dispose();
		if (agentClassItemProvider != null) agentClassItemProvider.dispose();
		if (propertyItemProvider != null) propertyItemProvider.dispose();
		if (operationItemProvider != null) operationItemProvider.dispose();
		if (actionClassItemProvider != null) actionClassItemProvider.dispose();
		if (namedElementItemProvider != null) namedElementItemProvider.dispose();
		if (packageableElementItemProvider != null) packageableElementItemProvider.dispose();
		if (typeItemProvider != null) typeItemProvider.dispose();
		if (namespaceItemProvider != null) namespaceItemProvider.dispose();
		if (redefinableElementItemProvider != null) redefinableElementItemProvider.dispose();
		if (organizationClassItemProvider != null) organizationClassItemProvider.dispose();
		if (agentRoleClassItemProvider != null) agentRoleClassItemProvider.dispose();
		if (objectRoleClassItemProvider != null) objectRoleClassItemProvider.dispose();
		if (environmentClassItemProvider != null) environmentClassItemProvider.dispose();
		if (agentMessageClassItemProvider != null) agentMessageClassItemProvider.dispose();
		if (multiplicityElementItemProvider != null) multiplicityElementItemProvider.dispose();
		if (typedElementItemProvider != null) typedElementItemProvider.dispose();
		if (planClassItemProvider != null) planClassItemProvider.dispose();
		if (dutyItemProvider != null) dutyItemProvider.dispose();
		if (rightItemProvider != null) rightItemProvider.dispose();
		if (protocolClassItemProvider != null) protocolClassItemProvider.dispose();
		if (relationshipItemProvider != null) relationshipItemProvider.dispose();
		if (directedRelationshipItemProvider != null) directedRelationshipItemProvider.dispose();
		if (associationItemProvider != null) associationItemProvider.dispose();
		if (dependencyItemProvider != null) dependencyItemProvider.dispose();
		if (ownershipItemProvider != null) ownershipItemProvider.dispose();
		if (inhabitItemProvider != null) inhabitItemProvider.dispose();
		if (controlItemProvider != null) controlItemProvider.dispose();
		if (playItemProvider != null) playItemProvider.dispose();
		if (generalizationItemProvider != null) generalizationItemProvider.dispose();
		if (goalItemProvider != null) goalItemProvider.dispose();
		if (beliefItemProvider != null) beliefItemProvider.dispose();
		if (constraintItemProvider != null) constraintItemProvider.dispose();
		if (masmlClassDiagramItemProvider != null) masmlClassDiagramItemProvider.dispose();
		if (parameterItemProvider != null) parameterItemProvider.dispose();
		if (aggregationItemProvider != null) aggregationItemProvider.dispose();
		if (compositeItemProvider != null) compositeItemProvider.dispose();
		if (perceptionItemProvider != null) perceptionItemProvider.dispose();
		if (planningItemProvider != null) planningItemProvider.dispose();
	}

}
